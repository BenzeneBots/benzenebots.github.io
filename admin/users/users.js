const ROLES=["Admin","Editor","View Only"],getAllUsers=async()=>{let e=await fetch(API_ROOT+"/users",{method:"GET",headers:{id:auth.id,password:auth.password}}).then((e=>e.json()));if(e){let t="";for(let d of e.users)t+=`<tr>\n                    <td>${d.id}</td>                        \n                    <td>${d.name}</td>                        \n                    <td>${d.email}</td>                       \n                    <td>${ROLES[d.role]}</td>                        \n                    <td><a class="btn red darken-3" href="/admin/users/edit.html?id=${d.id}">Edit</a></td>                       \n                    <td><button class="btn red darken-3" onclick="Delete(this)" userId="${d.id}">Delete</a></td>\n                </tr>`;document.getElementById("out").innerHTML=t}else M.toast({html:e.error})},getUser=async()=>{let e=await fetch(API_ROOT+"/user/"+USER_ID,{method:"GET",headers:{id:auth.id,password:auth.password}}).then((e=>e.json()));if(e){document.getElementById("name").value=e.user.name,document.getElementById("email").value=e.user.email;for(let t of document.getElementById("role").children)t.value===e.user.role.toString()&&(t.selected="true");setTimeout((()=>M.FormSelect.init(document.getElementById("role"),{})),3)}else M.toast({html:e.error})},userObj=async()=>{let e=document.getElementById("password").value,t=3;for(let e of document.getElementById("role").children)e.selected&&(t=e.value);if("placeholder"===e)return{id:USER_ID,name:document.getElementById("name").value,email:document.getElementById("email").value,role:t};let d=await new Promise(((t,d)=>crypto.subtle.digest("SHA-256",(new TextEncoder).encode(e)).then((e=>{t(Array.prototype.map.call(new Uint8Array(e),(e=>("00"+e.toString(16)).slice(-2))).join(""))}))));return{id:USER_ID,name:document.getElementById("name").value,email:document.getElementById("email").value,role:t,password:d}},createUser=async()=>{let e=await userObj(),t=await fetch(API_ROOT+"/user/",{method:"POST",headers:{"Content-Type":"application/json",id:auth.id,password:auth.password},body:JSON.stringify(e)}).then((e=>e.json()));t?window.location.href="/admin/users":M.toast({html:t.error})},updateUser=async()=>{let e=await userObj(),t=await fetch(API_ROOT+"/user/update/"+USER_ID,{method:"POST",headers:{"Content-Type":"application/json",id:auth.id,password:auth.password},body:JSON.stringify(e)}).then((e=>e.json()));t.success?M.toast({html:"Update Success"}):M.toast({html:t.error})},Delete=e=>{fetch(API_ROOT+"/user/delete/"+e.getAttribute("userid"),{method:"DELETE",headers:{id:auth.id,password:auth.password}}).then((e=>{window.location="/admin/users/"}))};